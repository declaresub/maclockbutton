#tag ClassProtected Class MacLockButtonInherits Canvas	#tag Event		Sub Paint(g As Graphics)		  g.DrawPicture LockPicture(me.LockState), 0, 0		  		  		End Sub	#tag EndEvent	#tag Event		Sub MouseEnter()		  if me.Locked then		    if me.Pressed then		      me.LockState = StateLockedPressed		    else		      me.LockState = StateLockedRollover		    end if		  else		    //		  end if		  		End Sub	#tag EndEvent	#tag Event		Sub MouseExit()		  if me.Locked then		    if me.Pressed then		      me.LockState = StateLockedRollover		    else		      me.LockState = StateLocked		    end if		  else		    //		  end if		End Sub	#tag EndEvent	#tag Event		Function MouseDown(X As Integer, Y As Integer) As Boolean		  me.Pressed = true		  if me.Locked then		    me.LockState = StateLockedPressed		  else		    me.LockState  = StateUnlockedPressed		  end if		  return true		End Function	#tag EndEvent	#tag Event		Sub MouseDrag(X As Integer, Y As Integer)		  if me.IsOverButton(X, Y) then		    if me.Locked then		      me.LockState = StateLockedPressed		    else		      me.LockState = StateUnlockedPressed		    end if		    		  else		    if me.Locked then		      me.LockState = StateLockedRollover		    else		      me.LockState = StateUnlockedRollover		    end if		  end if		End Sub	#tag EndEvent	#tag Event		Sub MouseUp(X As Integer, Y As Integer)		  me.Pressed = false		  		  if me.IsOverButton(X, Y) then		    Action		  else		    //		  end if		  		  if me.Locked then		    me.LockState = StateLocked		  else		    me.LockState = StateUnlocked		  end if		  		  		End Sub	#tag EndEvent	#tag Method, Flags = &h21		Private Shared Function LockPicture(state as Integer) As Picture		  return GetFolderItem(LockPicturePath(state), FolderItem.PathTypeShell).OpenAsPicture		  		exception ufe as UnsupportedFormatException		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function LockPicturePath(state as Integer) As String		  select case state		  case StateLocked		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Locked State.tif"		  case StateLockedRollover 		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Locked State_Rollover.tif"		  case StateLockedPressed		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Locked State_Pressed.tif"		  case StateUnlocked		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Unlocked State.tif"		  case StateUnlockedRollover		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Unlocked State_Rollover.tif"		  case StateUnlockedPressed		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Unlocked State_Pressed.tif"		  case StateAmination1		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 01.tif"		  case StateAmination2		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 02.tif"		  case StateAmination3		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 03.tif"		  case StateAmination4		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 04.tif"		  case StateAmination5		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 05.tif"		  case StateAmination6		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 06.tif"		  case StateAmination7		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 07.tif"		  case StateAmination8		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 08.tif"		  case StateAmination9		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 09.tif"		  case StateAmination10		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 10.tif"		  case StateAmination11		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 11.tif"		  case StateAmination12		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 12.tif"		  case StateAmination13		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 13.tif"		  case StateAmination14		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 14.tif"		  case StateAmination15		    return "/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/Lock_Open Anim 15.tif"		  else		    return ""		  end select		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub LockState(assigns value as Integer)		  if value = me.LockState then		    return		  end if		  		  me.pLockState = value		  me.Refresh		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function LockState() As Integer		  return me.pLockState		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function IsOverButton(X as Integer, Y as Integer) As Boolean		  return X >= 0 and X < me.Width and Y >= 0 and Y < me.Height		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ToggleAnimated()		  dim stateincrement as Integer		  dim lockSound as Sound		  if me.Locked then		    stateincrement = 1		    me.LockState = StateLocked		    lockSound = LockSoundOpening		  else		    stateincrement = -1		    me.LockState = StateUnlocked		    lockSound = LockSoundClosing		  end if		  		  if lockSound <> nil then		    lockSound.Play		  end if		  for i as Integer = 1 to 16		    me.LockState = me.LockState + stateincrement		    app.SleepCurrentThread 10		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function LockSoundOpening() As Sound		  return GetFolderItem("/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/lockOpening.aif", FolderItem.PathTypeShell).OpenAsSound		  		exception ufe as UnsupportedFormatException		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function LockSoundClosing() As Sound		  return GetFolderItem("/System/Library/Frameworks/SecurityInterface.framework/Versions/A/Resources/lockClosing.aif", FolderItem.PathTypeShell).OpenAsSound		  		exception ufe as UnsupportedFormatException		  return nil		End Function	#tag EndMethod	#tag Hook, Flags = &h0		Event Action()	#tag EndHook	#tag Property, Flags = &h21		Private pLockState As Integer = StateLocked	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  return me.LockState <= 0			End Get		#tag EndGetter		#tag Setter			Set			  if value = me.Locked then			    return			  end if			  			  me.LockState = me.LockState xor 16			End Set		#tag EndSetter		Locked As Boolean	#tag EndComputedProperty	#tag Property, Flags = &h21		Private Pressed As Boolean	#tag EndProperty	#tag Constant, Name = StateLocked, Type = Double, Dynamic = False, Default = \"0", Scope = Private	#tag EndConstant	#tag Constant, Name = StateRollover, Type = Double, Dynamic = False, Default = \"1", Scope = Private	#tag EndConstant	#tag Constant, Name = StateLockedRollover, Type = Double, Dynamic = False, Default = \"-1", Scope = Private	#tag EndConstant	#tag Constant, Name = StateLockedPressed, Type = Double, Dynamic = False, Default = \"-2", Scope = Private	#tag EndConstant	#tag Constant, Name = StateUnlockedPressed, Type = Double, Dynamic = False, Default = \"17", Scope = Private	#tag EndConstant	#tag Constant, Name = StateUnlocked, Type = Double, Dynamic = False, Default = \"16", Scope = Private	#tag EndConstant	#tag Constant, Name = StateUnlockedRollover, Type = Double, Dynamic = False, Default = \"18", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination1, Type = Double, Dynamic = False, Default = \"1", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination14, Type = Double, Dynamic = False, Default = \"14", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination3, Type = Double, Dynamic = False, Default = \"3", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination4, Type = Double, Dynamic = False, Default = \"4", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination6, Type = Double, Dynamic = False, Default = \"6", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination5, Type = Double, Dynamic = False, Default = \"5", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination7, Type = Double, Dynamic = False, Default = \"7", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination8, Type = Double, Dynamic = False, Default = \"8", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination12, Type = Double, Dynamic = False, Default = \"12", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination13, Type = Double, Dynamic = False, Default = \"13", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination15, Type = Double, Dynamic = False, Default = \"15", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination9, Type = Double, Dynamic = False, Default = \"9", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination10, Type = Double, Dynamic = False, Default = \"10", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination11, Type = Double, Dynamic = False, Default = \"11", Scope = Private	#tag EndConstant	#tag Constant, Name = StateAmination2, Type = Double, Dynamic = False, Default = \"2", Scope = Private	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Backdrop"			Visible=true			Group="Appearance"			Type="Picture"			EditorType="Picture"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AcceptFocus"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AcceptTabs"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="DoubleBuffer"			Visible=true			Group="Behavior"			InitialValue="False"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="EraseBackground"			Visible=true			Group="Behavior"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			InheritedFrom="Canvas"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass